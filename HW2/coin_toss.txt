import numpy
# CS 156a - Fall Term 2018
# Neymika Jain
# Below is a rough outline of how I produced the linear regression model used for questions
# 1 through 2. Numpy was used to handle vector and random operations.
# coinToss:
# Given the number of runs, coins/run, and independent flips/coins,
# determine the number of heads and tails for each coin after each
# simulated flip (helper method flipCoin used to flip a coin a given number 
# of times)
# Determine the frequency of heads for 3 coins in particular per run:
# cone, i.e. the first coin flipped; crand, i.e. a random coin; and cmin,
# i.e. the coin which has the least number of heads per run
# Return these three frequecies and print in the following order:
# (vone, vrand, vmin)
def coinToss(numRuns, numCoins, numFlips):
	vone = []
	vrand = []
	vmin = []
	for i in range(0, int(numRuns)):
		coinhead = []
		cointail = []
		for j in range(0, int(numCoins)):
			temp = flipCoin(numFlips)
			coinhead.append(temp[0])
			cointail.append(temp[1])
		cone = coinhead[0]
		crand = coinhead[numpy.random.randint(0, numCoins)]
		cmin = numpy.array(coinhead).min()
		vone.append(cone/numFlips)
		vrand.append(crand/numFlips)
		vmin.append(cmin/numFlips)
	return (numpy.average(vone), numpy.average(vrand), numpy.average(vmin))


def flipCoin(numFlips):
	heads = 0
	tails = 0
	for i in range(0, int(numFlips)):
		temp = numpy.random.random_integers(0, 1)
		if temp == 0:
			heads += 1
		if temp == 1:
			tails += 1
	return (heads, tails)

print(coinToss(100000.0, 1000.0, 10.0)[:])